 ###############Client-Server Architecture#############
Client-Server Architecture is a distributed application model.
Client-Server Architecture splits tasks between clients and servers.
Imagine it a conversation: clients ask questions, and servers answer.

Example: Imagine you are using a web browser to access a website. Your browser is the client. When you type in a URL and hit enter, your browser sends a request to the server where the website is hosted. The server processes this request, fetches the necessary data, and sends back a response, which your browser then displays as a web page.

#Client:
    --A client is a device or software application that send requests a server for resources or services.
    --A Clients can be web browsers, smartphones, tablets, desktop applications, and other networked devices.
    --The client provides the interface for users to interact with the system.
    --The client runs on the user's local computer or device.
    --Clients uses communication protocols such as HTTP, HTTPS, or WebSocket to interact with servers.
    --The client retrieves data from the server and then displays it to users through its interface.
    --While users interact with the application, the client maintains temporary session information.

#Server:
    --A server is a dedicated computer that assists other devices, called clients, on a network.
    --Servers receive requests from clients and fulfill those requests by processing data.
    --A single server can efficiently manage requests from multiple clients simultaneously.
    --After processing requests, servers send back generated responses to the respective clients.
    --Servers include web servers, application servers, and database servers, each responding to specific client needs.
    --Servers are designed to operate continuously (24/7), ensuring they are always available for clients.
    --In large systems, servers use load balancing to evenly distribute requests across multiple servers, ensuring optimal performance.
    --Servers can handle increased user requests by adding more servers or upgrading existing server hardware.
    --Sensitive data can be stored securely on servers.